<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mss.framework.base.user.server.dao.OAuthRefreshTokenMapper">
    <resultMap id="BaseResultMap" type="com.mss.framework.base.server.user.po.OAuthRefreshToken">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="token_id" jdbcType="VARCHAR" property="tokenId"/>
        <result column="refresh_token" jdbcType="VARCHAR" property="refreshToken"/>
        <result column="expires_in" jdbcType="BIGINT" property="expiresIn"/>
        <result column="create_user" jdbcType="VARCHAR" property="createUser"/>
        <result column="update_user" jdbcType="VARCHAR" property="updateUser"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, token_id, refresh_token, expires_in, create_user, update_user, create_time, update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="String" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from oauth_refresh_token
        where id = #{id}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="String">
        delete from oauth_refresh_token
        where id = #{id}
    </delete>
    <insert id="insert" parameterType="com.mss.framework.base.server.user.po.OAuthRefreshToken">
        insert into oauth_refresh_token
        (id, token_id, refresh_token, expires_in, create_user, update_user, create_time, update_time)
        values
        (#{id, jdbcType=VARCHAR}, #{tokenId, jdbcType=VARCHAR}, #{refreshToken, jdbcType=VARCHAR}, #{expiresIn, jdbcType=BIGINT}, #{createUser, jdbcType=VARCHAR}, #{updateUser, jdbcType=VARCHAR}, #{createTime, jdbcType=TIMESTAMP}, #{updateTime, jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.mss.framework.base.server.user.po.OAuthRefreshToken">
        insert into oauth_refresh_token
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="tokenId != null">
                token_id,
            </if>
            <if test="refreshToken != null">
                refresh_token,
            </if>
            <if test="expiresIn != null">
                expires_in,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=VARCHAR},
            </if>
            <if test="tokenId != null">
                #{tokenId, jdbcType=VARCHAR},
            </if>
            <if test="refreshToken != null">
                #{refreshToken, jdbcType=VARCHAR},
            </if>
            <if test="expiresIn != null">
                #{expiresIn, jdbcType=BIGINT},
            </if>
            <if test="createUser != null">
                #{createUser, jdbcType=VARCHAR},
            </if>
            <if test="updateUser != null">
                #{updateUser, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.mss.framework.base.server.user.po.OAuthRefreshToken">
        update oauth_refresh_token
        <set>
            <if test="tokenId != null">
                token_id = #{tokenId, jdbcType=VARCHAR},
            </if>
            <if test="refreshToken != null">
                refresh_token = #{refreshToken, jdbcType=VARCHAR},
            </if>
            <if test="expiresIn != null">
                expires_in = #{expiresIn, jdbcType=BIGINT},
            </if>
            <if test="createUser != null">
                create_user = #{createUser, jdbcType=VARCHAR},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mss.framework.base.server.user.po.OAuthRefreshToken">
        update oauth_refresh_token
        set
            token_id = #{tokenId, jdbcType=VARCHAR},
            refresh_token = #{refreshToken, jdbcType=VARCHAR},
            expires_in = #{expiresIn, jdbcType=BIGINT},
            create_user = #{createUser, jdbcType=VARCHAR},
            update_user = #{updateUser, jdbcType=VARCHAR},
            create_time = #{createTime, jdbcType=TIMESTAMP},
            update_time = #{updateTime, jdbcType=TIMESTAMP}
        where id = #{id}
    </update>
    <delete id="deleteByIdList" parameterType="map">
        delete from oauth_refresh_token
        where id in
        <foreach collection="idList" index="index" item="id" open="(" separator="," close=")" >
            #{id}
        </foreach>
    </delete>
    <select id="selectPageList" parameterType="com.mss.framework.base.server.user.po.OAuthRefreshToken" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from oauth_refresh_token
        <where>
            <if test="id != null">
                and id like #{id}
            </if>
            <if test="tokenId != null">
                and token_id like #{tokenId}
            </if>
            <if test="refreshToken != null">
                and refresh_token like #{refreshToken}
            </if>
            <if test="expiresIn != null">
                and expires_in like #{expiresIn}
            </if>
            <if test="createUser != null">
                and create_user like #{createUser}
            </if>
            <if test="updateUser != null">
                and update_user like #{updateUser}
            </if>
            <if test="createTime != null">
                and create_time like #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time like #{updateTime}
            </if>
        </where>
    </select>
    <select id="selectByRefreshToken" parameterType="string" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from oauth_refresh_token
        where refresh_token = #{refreshToken}
    </select>
    <select id="selectByTokenId" parameterType="string" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from oauth_refresh_token
        where token_id = #{tokenId}
    </select>
</mapper>
