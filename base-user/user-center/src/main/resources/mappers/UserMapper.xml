<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mss.framework.base.user.server.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.mss.framework.base.server.user.po.User">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="phone" jdbcType="INTEGER" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="sex" jdbcType="INTEGER" property="sex"/>
        <result column="birthday" jdbcType="VARCHAR" property="birthday"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, nickname, avatar, phone, email, sex, birthday, create_time, update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="String" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from user
        where id = #{id}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="String">
        delete from user
        where id = #{id}
    </delete>
    <insert id="insert" parameterType="com.mss.framework.base.server.user.po.User">
        insert into user
        (id, nickname, avatar, phone, email, sex, birthday, create_time, update_time)
        values
        (#{id, jdbcType=VARCHAR}, #{nickname, jdbcType=VARCHAR}, #{avatar, jdbcType=VARCHAR}, #{phone, jdbcType=INTEGER}, #{email, jdbcType=VARCHAR}, #{sex, jdbcType=INTEGER}, #{birthday, jdbcType=VARCHAR}, #{createTime, jdbcType=TIMESTAMP}, #{updateTime, jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.mss.framework.base.server.user.po.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="nickname != null">
                nickname,
            </if>
            <if test="avatar != null">
                avatar,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                #{nickname, jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar, jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone, jdbcType=INTEGER},
            </if>
            <if test="email != null">
                #{email, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex, jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                #{birthday, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.mss.framework.base.server.user.po.User">
        update user
        <set>
            <if test="nickname != null">
                nickname = #{nickname, jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                avatar = #{avatar, jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone, jdbcType=INTEGER},
            </if>
            <if test="email != null">
                email = #{email, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex, jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                birthday = #{birthday, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mss.framework.base.server.user.po.User">
        update user
        set
            nickname = #{nickname, jdbcType=VARCHAR},
            avatar = #{avatar, jdbcType=VARCHAR},
            phone = #{phone, jdbcType=INTEGER},
            email = #{email, jdbcType=VARCHAR},
            sex = #{sex, jdbcType=INTEGER},
            birthday = #{birthday, jdbcType=VARCHAR},
            create_time = #{createTime, jdbcType=TIMESTAMP},
            update_time = #{updateTime, jdbcType=TIMESTAMP}
        where id = #{id}
    </update>
    <delete id="deleteByIdList" parameterType="map">
        delete from user
        where id in
        <foreach collection="idList" index="index" item="id" open="(" separator="," close=")" >
            #{id}
        </foreach>
    </delete>
    <select id="selectPageList" parameterType="com.mss.framework.base.server.user.po.User" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from user
        <where>
            <if test="id != null">
                and id like #{id}
            </if>
            <if test="nickname != null">
                and nickname like #{nickname}
            </if>
            <if test="avatar != null">
                and avatar like #{avatar}
            </if>
            <if test="phone != null">
                and phone like #{phone}
            </if>
            <if test="email != null">
                and email like #{email}
            </if>
            <if test="sex != null">
                and sex like #{sex}
            </if>
            <if test="birthday != null">
                and birthday like #{birthday}
            </if>
            <if test="createTime != null">
                and create_time like #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time like #{updateTime}
            </if>
        </where>
    </select>
</mapper>
