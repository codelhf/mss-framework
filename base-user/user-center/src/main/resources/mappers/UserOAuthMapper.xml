<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mss.framework.base.user.server.dao.UserOAuthMapper">
    <resultMap id="BaseResultMap" type="com.mss.framework.base.user.server.pojo.UserOAuth">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="login_type" jdbcType="INTEGER" property="loginType"/>
        <result column="identify" jdbcType="VARCHAR" property="identify"/>
        <result column="credential" jdbcType="VARCHAR" property="credential"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id,user_id,login_type,identify,credential,create_time,update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="String" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from user_oauth
        where id = #{id, jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="String">
        delete from user_oauth
        where id = #{id, jdbcType=VARCHAR}
    </delete>
    <insert id="insert" parameterType="com.mss.framework.base.user.server.pojo.UserOAuth">
        insert into user_oauth
        (id, user_id, login_type, identify, credential, create_time, update_time)
        values
        (#{id, jdbcType=VARCHAR}, #{userId, jdbcType=VARCHAR}, #{loginType, jdbcType=INTEGER}, #{identify, jdbcType=VARCHAR}, #{credential, jdbcType=VARCHAR}, #{createTime, jdbcType=TIMESTAMP}, #{updateTime, jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.mss.framework.base.user.server.pojo.UserOAuth">
        insert into user_oauth
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="loginType != null">
                login_type,
            </if>
            <if test="identify != null">
                identify,
            </if>
            <if test="credential != null">
                credential,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId, jdbcType=VARCHAR},
            </if>
            <if test="loginType != null">
                #{loginType, jdbcType=INTEGER},
            </if>
            <if test="identify != null">
                #{identify, jdbcType=VARCHAR},
            </if>
            <if test="credential != null">
                #{credential, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.mss.framework.base.user.server.pojo.UserOAuth">
        update user_oauth
        <set>
            <if test="id != null">
                id = #{id, jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                user_id = #{userId, jdbcType=VARCHAR},
            </if>
            <if test="loginType != null">
                login_type = #{loginType, jdbcType=INTEGER},
            </if>
            <if test="identify != null">
                identify = #{identify, jdbcType=VARCHAR},
            </if>
            <if test="credential != null">
                credential = #{credential, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mss.framework.base.user.server.pojo.UserOAuth">
        update user_oauth
        set
            id = #{id, jdbcType=VARCHAR},
            user_id = #{userId, jdbcType=VARCHAR},
            login_type = #{loginType, jdbcType=INTEGER},
            identify = #{identify, jdbcType=VARCHAR},
            credential = #{credential, jdbcType=VARCHAR},
            create_time = #{createTime, jdbcType=TIMESTAMP},
            update_time = #{updateTime, jdbcType=TIMESTAMP}
        where id = #{id, jdbcType=VARCHAR}
    </update>
    <delete id="deleteByIdList" parameterType="map">
        delete from user_oauth
        where id in
        <foreach collection="idList" index="index" item="id" open="(" separator="," close=")" >
            #{id}
        </foreach>
    </delete>
    <select id="selectPageList" parameterType="com.mss.framework.base.user.server.pojo.UserOAuth" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from user_oauth
        <where>
            <if test="id != null">
                and id like #{id}
            </if>
            <if test="userId != null">
                and user_id like #{userId}
            </if>
            <if test="loginType != null">
                and login_type like #{loginType}
            </if>
            <if test="identify != null">
                and identify like #{identify}
            </if>
            <if test="credential != null">
                and credential like #{credential}
            </if>
            <if test="createTime != null">
                and create_time like #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time like #{updateTime}
            </if>
        </where>
    </select>
</mapper>
